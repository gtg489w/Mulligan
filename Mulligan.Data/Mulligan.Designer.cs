#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mulligan.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Mulligan")]
	public partial class MulliganDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertTournamentFamily(TournamentFamily instance);
    partial void UpdateTournamentFamily(TournamentFamily instance);
    partial void DeleteTournamentFamily(TournamentFamily instance);
    partial void InsertTournamentPlayer(TournamentPlayer instance);
    partial void UpdateTournamentPlayer(TournamentPlayer instance);
    partial void DeleteTournamentPlayer(TournamentPlayer instance);
    partial void InsertTournament(Tournament instance);
    partial void UpdateTournament(Tournament instance);
    partial void DeleteTournament(Tournament instance);
    partial void InsertPoolUser(PoolUser instance);
    partial void UpdatePoolUser(PoolUser instance);
    partial void DeletePoolUser(PoolUser instance);
    partial void InsertPool(Pool instance);
    partial void UpdatePool(Pool instance);
    partial void DeletePool(Pool instance);
    partial void InsertPoolEntry(PoolEntry instance);
    partial void UpdatePoolEntry(PoolEntry instance);
    partial void DeletePoolEntry(PoolEntry instance);
    partial void InsertPoolEntryTournamentPlayer(PoolEntryTournamentPlayer instance);
    partial void UpdatePoolEntryTournamentPlayer(PoolEntryTournamentPlayer instance);
    partial void DeletePoolEntryTournamentPlayer(PoolEntryTournamentPlayer instance);
    #endregion
		
		public MulliganDataContext() : 
				base(global::Mulligan.Data.Properties.Settings.Default.MulliganConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MulliganDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MulliganDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MulliganDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MulliganDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<TournamentFamily> TournamentFamilies
		{
			get
			{
				return this.GetTable<TournamentFamily>();
			}
		}
		
		public System.Data.Linq.Table<TournamentPlayer> TournamentPlayers
		{
			get
			{
				return this.GetTable<TournamentPlayer>();
			}
		}
		
		public System.Data.Linq.Table<Tournament> Tournaments
		{
			get
			{
				return this.GetTable<Tournament>();
			}
		}
		
		public System.Data.Linq.Table<PoolUser> PoolUsers
		{
			get
			{
				return this.GetTable<PoolUser>();
			}
		}
		
		public System.Data.Linq.Table<Pool> Pools
		{
			get
			{
				return this.GetTable<Pool>();
			}
		}
		
		public System.Data.Linq.Table<PoolEntry> PoolEntries
		{
			get
			{
				return this.GetTable<PoolEntry>();
			}
		}
		
		public System.Data.Linq.Table<PoolEntryTournamentPlayer> PoolEntryTournamentPlayers
		{
			get
			{
				return this.GetTable<PoolEntryTournamentPlayer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private EntitySet<TournamentPlayer> _TournamentPlayers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    #endregion
		
		public Player()
		{
			this._TournamentPlayers = new EntitySet<TournamentPlayer>(new Action<TournamentPlayer>(this.attach_TournamentPlayers), new Action<TournamentPlayer>(this.detach_TournamentPlayers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_TournamentPlayer", Storage="_TournamentPlayers", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<TournamentPlayer> TournamentPlayers
		{
			get
			{
				return this._TournamentPlayers;
			}
			set
			{
				this._TournamentPlayers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TournamentPlayers(TournamentPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_TournamentPlayers(TournamentPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _UserName;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _LastLoggedIn;
		
		private EntitySet<PoolUser> _PoolUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnLastLoggedInChanging(System.DateTime value);
    partial void OnLastLoggedInChanged();
    #endregion
		
		public User()
		{
			this._PoolUsers = new EntitySet<PoolUser>(new Action<PoolUser>(this.attach_PoolUsers), new Action<PoolUser>(this.detach_PoolUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoggedIn", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoggedIn
		{
			get
			{
				return this._LastLoggedIn;
			}
			set
			{
				if ((this._LastLoggedIn != value))
				{
					this.OnLastLoggedInChanging(value);
					this.SendPropertyChanging();
					this._LastLoggedIn = value;
					this.SendPropertyChanged("LastLoggedIn");
					this.OnLastLoggedInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PoolUser", Storage="_PoolUsers", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<PoolUser> PoolUsers
		{
			get
			{
				return this._PoolUsers;
			}
			set
			{
				this._PoolUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PoolUsers(PoolUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PoolUsers(PoolUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TournamentFamilies")]
	public partial class TournamentFamily : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Tournament> _Tournaments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TournamentFamily()
		{
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TournamentFamily_Tournament", Storage="_Tournaments", ThisKey="Id", OtherKey="TournamentFamilyId")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.TournamentFamily = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.TournamentFamily = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TournamentPlayers")]
	public partial class TournamentPlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Score;
		
		private bool _IsActive;
		
		private System.Nullable<int> _Tier;
		
		private int _PlayerId;
		
		private int _TournamentId;
		
		private EntitySet<PoolEntryTournamentPlayer> _PoolEntryTournamentPlayers;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnTierChanging(System.Nullable<int> value);
    partial void OnTierChanged();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnTournamentIdChanging(int value);
    partial void OnTournamentIdChanged();
    #endregion
		
		public TournamentPlayer()
		{
			this._PoolEntryTournamentPlayers = new EntitySet<PoolEntryTournamentPlayer>(new Action<PoolEntryTournamentPlayer>(this.attach_PoolEntryTournamentPlayers), new Action<PoolEntryTournamentPlayer>(this.detach_PoolEntryTournamentPlayers));
			this._Player = default(EntityRef<Player>);
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tier", DbType="Int")]
		public System.Nullable<int> Tier
		{
			get
			{
				return this._Tier;
			}
			set
			{
				if ((this._Tier != value))
				{
					this.OnTierChanging(value);
					this.SendPropertyChanging();
					this._Tier = value;
					this.SendPropertyChanged("Tier");
					this.OnTierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL")]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentId", DbType="Int NOT NULL")]
		public int TournamentId
		{
			get
			{
				return this._TournamentId;
			}
			set
			{
				if ((this._TournamentId != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIdChanging(value);
					this.SendPropertyChanging();
					this._TournamentId = value;
					this.SendPropertyChanged("TournamentId");
					this.OnTournamentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TournamentPlayer_PoolEntryTournamentPlayer", Storage="_PoolEntryTournamentPlayers", ThisKey="Id", OtherKey="TournamentPlayerId")]
		public EntitySet<PoolEntryTournamentPlayer> PoolEntryTournamentPlayers
		{
			get
			{
				return this._PoolEntryTournamentPlayers;
			}
			set
			{
				this._PoolEntryTournamentPlayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_TournamentPlayer", Storage="_Player", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.TournamentPlayers.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.TournamentPlayers.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_TournamentPlayer", Storage="_Tournament", ThisKey="TournamentId", OtherKey="Id", IsForeignKey=true)]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.TournamentPlayers.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.TournamentPlayers.Add(this);
						this._TournamentId = value.Id;
					}
					else
					{
						this._TournamentId = default(int);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PoolEntryTournamentPlayers(PoolEntryTournamentPlayer entity)
		{
			this.SendPropertyChanging();
			entity.TournamentPlayer = this;
		}
		
		private void detach_PoolEntryTournamentPlayers(PoolEntryTournamentPlayer entity)
		{
			this.SendPropertyChanging();
			entity.TournamentPlayer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tournaments")]
	public partial class Tournament : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _TournamentFamilyId;
		
		private EntitySet<TournamentPlayer> _TournamentPlayers;
		
		private EntitySet<Pool> _Pools;
		
		private EntityRef<TournamentFamily> _TournamentFamily;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnTournamentFamilyIdChanging(int value);
    partial void OnTournamentFamilyIdChanged();
    #endregion
		
		public Tournament()
		{
			this._TournamentPlayers = new EntitySet<TournamentPlayer>(new Action<TournamentPlayer>(this.attach_TournamentPlayers), new Action<TournamentPlayer>(this.detach_TournamentPlayers));
			this._Pools = new EntitySet<Pool>(new Action<Pool>(this.attach_Pools), new Action<Pool>(this.detach_Pools));
			this._TournamentFamily = default(EntityRef<TournamentFamily>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentFamilyId", DbType="Int NOT NULL")]
		public int TournamentFamilyId
		{
			get
			{
				return this._TournamentFamilyId;
			}
			set
			{
				if ((this._TournamentFamilyId != value))
				{
					if (this._TournamentFamily.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentFamilyIdChanging(value);
					this.SendPropertyChanging();
					this._TournamentFamilyId = value;
					this.SendPropertyChanged("TournamentFamilyId");
					this.OnTournamentFamilyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_TournamentPlayer", Storage="_TournamentPlayers", ThisKey="Id", OtherKey="TournamentId")]
		public EntitySet<TournamentPlayer> TournamentPlayers
		{
			get
			{
				return this._TournamentPlayers;
			}
			set
			{
				this._TournamentPlayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Pool", Storage="_Pools", ThisKey="Id", OtherKey="TournamentId")]
		public EntitySet<Pool> Pools
		{
			get
			{
				return this._Pools;
			}
			set
			{
				this._Pools.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TournamentFamily_Tournament", Storage="_TournamentFamily", ThisKey="TournamentFamilyId", OtherKey="Id", IsForeignKey=true)]
		public TournamentFamily TournamentFamily
		{
			get
			{
				return this._TournamentFamily.Entity;
			}
			set
			{
				TournamentFamily previousValue = this._TournamentFamily.Entity;
				if (((previousValue != value) 
							|| (this._TournamentFamily.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TournamentFamily.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._TournamentFamily.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._TournamentFamilyId = value.Id;
					}
					else
					{
						this._TournamentFamilyId = default(int);
					}
					this.SendPropertyChanged("TournamentFamily");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TournamentPlayers(TournamentPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_TournamentPlayers(TournamentPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_Pools(Pool entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_Pools(Pool entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PoolUsers")]
	public partial class PoolUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _PoolId;
		
		private System.DateTime _DateCreated;
		
		private bool _IsActive;
		
		private EntitySet<PoolEntry> _PoolEntries;
		
		private EntityRef<User> _User;
		
		private EntityRef<Pool> _Pool;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPoolIdChanging(int value);
    partial void OnPoolIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public PoolUser()
		{
			this._PoolEntries = new EntitySet<PoolEntry>(new Action<PoolEntry>(this.attach_PoolEntries), new Action<PoolEntry>(this.detach_PoolEntries));
			this._User = default(EntityRef<User>);
			this._Pool = default(EntityRef<Pool>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoolId", DbType="Int NOT NULL")]
		public int PoolId
		{
			get
			{
				return this._PoolId;
			}
			set
			{
				if ((this._PoolId != value))
				{
					if (this._Pool.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPoolIdChanging(value);
					this.SendPropertyChanging();
					this._PoolId = value;
					this.SendPropertyChanged("PoolId");
					this.OnPoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PoolUser_PoolEntry", Storage="_PoolEntries", ThisKey="Id", OtherKey="PoolUserId")]
		public EntitySet<PoolEntry> PoolEntries
		{
			get
			{
				return this._PoolEntries;
			}
			set
			{
				this._PoolEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PoolUser", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PoolUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PoolUsers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pool_PoolUser", Storage="_Pool", ThisKey="PoolId", OtherKey="Id", IsForeignKey=true)]
		public Pool Pool
		{
			get
			{
				return this._Pool.Entity;
			}
			set
			{
				Pool previousValue = this._Pool.Entity;
				if (((previousValue != value) 
							|| (this._Pool.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pool.Entity = null;
						previousValue.PoolUsers.Remove(this);
					}
					this._Pool.Entity = value;
					if ((value != null))
					{
						value.PoolUsers.Add(this);
						this._PoolId = value.Id;
					}
					else
					{
						this._PoolId = default(int);
					}
					this.SendPropertyChanged("Pool");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PoolEntries(PoolEntry entity)
		{
			this.SendPropertyChanging();
			entity.PoolUser = this;
		}
		
		private void detach_PoolEntries(PoolEntry entity)
		{
			this.SendPropertyChanging();
			entity.PoolUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pools")]
	public partial class Pool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<decimal> _EntryFee;
		
		private System.Nullable<int> _EntryLimit;
		
		private string _Passcode;
		
		private System.DateTime _DateCreated;
		
		private bool _IsActive;
		
		private int _TournamentId;
		
		private EntitySet<PoolUser> _PoolUsers;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEntryFeeChanging(System.Nullable<decimal> value);
    partial void OnEntryFeeChanged();
    partial void OnEntryLimitChanging(System.Nullable<int> value);
    partial void OnEntryLimitChanged();
    partial void OnPasscodeChanging(string value);
    partial void OnPasscodeChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnTournamentIdChanging(int value);
    partial void OnTournamentIdChanged();
    #endregion
		
		public Pool()
		{
			this._PoolUsers = new EntitySet<PoolUser>(new Action<PoolUser>(this.attach_PoolUsers), new Action<PoolUser>(this.detach_PoolUsers));
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryFee", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> EntryFee
		{
			get
			{
				return this._EntryFee;
			}
			set
			{
				if ((this._EntryFee != value))
				{
					this.OnEntryFeeChanging(value);
					this.SendPropertyChanging();
					this._EntryFee = value;
					this.SendPropertyChanged("EntryFee");
					this.OnEntryFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryLimit", DbType="Int")]
		public System.Nullable<int> EntryLimit
		{
			get
			{
				return this._EntryLimit;
			}
			set
			{
				if ((this._EntryLimit != value))
				{
					this.OnEntryLimitChanging(value);
					this.SendPropertyChanging();
					this._EntryLimit = value;
					this.SendPropertyChanged("EntryLimit");
					this.OnEntryLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passcode", DbType="NVarChar(50)")]
		public string Passcode
		{
			get
			{
				return this._Passcode;
			}
			set
			{
				if ((this._Passcode != value))
				{
					this.OnPasscodeChanging(value);
					this.SendPropertyChanging();
					this._Passcode = value;
					this.SendPropertyChanged("Passcode");
					this.OnPasscodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentId", DbType="Int NOT NULL")]
		public int TournamentId
		{
			get
			{
				return this._TournamentId;
			}
			set
			{
				if ((this._TournamentId != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIdChanging(value);
					this.SendPropertyChanging();
					this._TournamentId = value;
					this.SendPropertyChanged("TournamentId");
					this.OnTournamentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pool_PoolUser", Storage="_PoolUsers", ThisKey="Id", OtherKey="PoolId")]
		public EntitySet<PoolUser> PoolUsers
		{
			get
			{
				return this._PoolUsers;
			}
			set
			{
				this._PoolUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Pool", Storage="_Tournament", ThisKey="TournamentId", OtherKey="Id", IsForeignKey=true)]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.Pools.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.Pools.Add(this);
						this._TournamentId = value.Id;
					}
					else
					{
						this._TournamentId = default(int);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PoolUsers(PoolUser entity)
		{
			this.SendPropertyChanging();
			entity.Pool = this;
		}
		
		private void detach_PoolUsers(PoolUser entity)
		{
			this.SendPropertyChanging();
			entity.Pool = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PoolEntries")]
	public partial class PoolEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PoolUserId;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private bool _IsActive;
		
		private EntitySet<PoolEntryTournamentPlayer> _PoolEntryTournamentPlayers;
		
		private EntityRef<PoolUser> _PoolUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPoolUserIdChanging(int value);
    partial void OnPoolUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public PoolEntry()
		{
			this._PoolEntryTournamentPlayers = new EntitySet<PoolEntryTournamentPlayer>(new Action<PoolEntryTournamentPlayer>(this.attach_PoolEntryTournamentPlayers), new Action<PoolEntryTournamentPlayer>(this.detach_PoolEntryTournamentPlayers));
			this._PoolUser = default(EntityRef<PoolUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoolUserId", DbType="Int NOT NULL")]
		public int PoolUserId
		{
			get
			{
				return this._PoolUserId;
			}
			set
			{
				if ((this._PoolUserId != value))
				{
					if (this._PoolUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPoolUserIdChanging(value);
					this.SendPropertyChanging();
					this._PoolUserId = value;
					this.SendPropertyChanged("PoolUserId");
					this.OnPoolUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="Date NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PoolEntry_PoolEntryTournamentPlayer", Storage="_PoolEntryTournamentPlayers", ThisKey="Id", OtherKey="PoolEntryId")]
		public EntitySet<PoolEntryTournamentPlayer> PoolEntryTournamentPlayers
		{
			get
			{
				return this._PoolEntryTournamentPlayers;
			}
			set
			{
				this._PoolEntryTournamentPlayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PoolUser_PoolEntry", Storage="_PoolUser", ThisKey="PoolUserId", OtherKey="Id", IsForeignKey=true)]
		public PoolUser PoolUser
		{
			get
			{
				return this._PoolUser.Entity;
			}
			set
			{
				PoolUser previousValue = this._PoolUser.Entity;
				if (((previousValue != value) 
							|| (this._PoolUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PoolUser.Entity = null;
						previousValue.PoolEntries.Remove(this);
					}
					this._PoolUser.Entity = value;
					if ((value != null))
					{
						value.PoolEntries.Add(this);
						this._PoolUserId = value.Id;
					}
					else
					{
						this._PoolUserId = default(int);
					}
					this.SendPropertyChanged("PoolUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PoolEntryTournamentPlayers(PoolEntryTournamentPlayer entity)
		{
			this.SendPropertyChanging();
			entity.PoolEntry = this;
		}
		
		private void detach_PoolEntryTournamentPlayers(PoolEntryTournamentPlayer entity)
		{
			this.SendPropertyChanging();
			entity.PoolEntry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PoolEntryTournamentPlayers")]
	public partial class PoolEntryTournamentPlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PoolEntryId;
		
		private int _TournamentPlayerId;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<PoolEntry> _PoolEntry;
		
		private EntityRef<TournamentPlayer> _TournamentPlayer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPoolEntryIdChanging(int value);
    partial void OnPoolEntryIdChanged();
    partial void OnTournamentPlayerIdChanging(int value);
    partial void OnTournamentPlayerIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public PoolEntryTournamentPlayer()
		{
			this._PoolEntry = default(EntityRef<PoolEntry>);
			this._TournamentPlayer = default(EntityRef<TournamentPlayer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoolEntryId", DbType="Int NOT NULL")]
		public int PoolEntryId
		{
			get
			{
				return this._PoolEntryId;
			}
			set
			{
				if ((this._PoolEntryId != value))
				{
					if (this._PoolEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPoolEntryIdChanging(value);
					this.SendPropertyChanging();
					this._PoolEntryId = value;
					this.SendPropertyChanged("PoolEntryId");
					this.OnPoolEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentPlayerId", DbType="Int NOT NULL")]
		public int TournamentPlayerId
		{
			get
			{
				return this._TournamentPlayerId;
			}
			set
			{
				if ((this._TournamentPlayerId != value))
				{
					if (this._TournamentPlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._TournamentPlayerId = value;
					this.SendPropertyChanged("TournamentPlayerId");
					this.OnTournamentPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PoolEntry_PoolEntryTournamentPlayer", Storage="_PoolEntry", ThisKey="PoolEntryId", OtherKey="Id", IsForeignKey=true)]
		public PoolEntry PoolEntry
		{
			get
			{
				return this._PoolEntry.Entity;
			}
			set
			{
				PoolEntry previousValue = this._PoolEntry.Entity;
				if (((previousValue != value) 
							|| (this._PoolEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PoolEntry.Entity = null;
						previousValue.PoolEntryTournamentPlayers.Remove(this);
					}
					this._PoolEntry.Entity = value;
					if ((value != null))
					{
						value.PoolEntryTournamentPlayers.Add(this);
						this._PoolEntryId = value.Id;
					}
					else
					{
						this._PoolEntryId = default(int);
					}
					this.SendPropertyChanged("PoolEntry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TournamentPlayer_PoolEntryTournamentPlayer", Storage="_TournamentPlayer", ThisKey="TournamentPlayerId", OtherKey="Id", IsForeignKey=true)]
		public TournamentPlayer TournamentPlayer
		{
			get
			{
				return this._TournamentPlayer.Entity;
			}
			set
			{
				TournamentPlayer previousValue = this._TournamentPlayer.Entity;
				if (((previousValue != value) 
							|| (this._TournamentPlayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TournamentPlayer.Entity = null;
						previousValue.PoolEntryTournamentPlayers.Remove(this);
					}
					this._TournamentPlayer.Entity = value;
					if ((value != null))
					{
						value.PoolEntryTournamentPlayers.Add(this);
						this._TournamentPlayerId = value.Id;
					}
					else
					{
						this._TournamentPlayerId = default(int);
					}
					this.SendPropertyChanged("TournamentPlayer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
